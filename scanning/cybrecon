#!/bin/bash

: '
Program: cybrecon
Purpose: Multipurpose reconnaissance toolkit designed to assist with ethical hacking and penetration testing
Developer: Cybernsniper-dev
Version: 1.1
Scripting Language: Bourne-Again Shell (Bash)
'

banner () {
   echo "  
           ___      _                              
          / __\   _| |__  _ __ ___  ___ ___  _ __  
         / / | | | | '_ \| '__/ _ \/ __/ _ \| '_ \ 
        / /__| |_| | |_) | | |  __/ (_| (_) | | | |
        \____/\__, |_.__/|_|  \___|\___\___/|_| |_|
              |___/                            
                    Cyber Recon Security Toolkit v1.1
                    Developed by - Hunter Kinney            
            "
}
# Function to calculate the number of hosts, usable IP range, and the final octets of the starting and ending hosts
calculate_hosts_and_range() {
    # Extract the IP address and subnet mask length from the CIDR notation
    IFS="/" read -r ip mask <<< "$cidr"

    first_three_octets="${ip%.*}"

    # Convert the subnet mask length (e.g., /24) to the number of host bits
    host_bits=$((32 - mask))

    # Calculate the number of hosts (2^host_bits - 2 for network and broadcast)
    num_hosts=$((2 ** host_bits - 2))

    # Convert the IP address to its integer representation
    IFS="." read -r a b c d <<< "$ip"
    ip_decimal=$((a * 256 ** 3 + b * 256 ** 2 + c * 256 + d))

    # Calculate the network and broadcast addresses
    net_address=$((ip_decimal & ((2 ** mask - 1) << (32 - mask))))
    broadcast_address=$((net_address + (2 ** host_bits - 1)))

    # Convert network and broadcast addresses back to dotted-decimal notation
    network_ip=$(printf "%d.%d.%d.%d" $(( (net_address >> 24) & 255)) $(( (net_address >> 16) & 255)) $(( (net_address >> 8) & 255)) $(( net_address & 255)))
    broadcast_ip=$(printf "%d.%d.%d.%d" $(( (broadcast_address >> 24) & 255)) $(( (broadcast_address >> 16) & 255)) $(( (broadcast_address >> 8) & 255)) $(( broadcast_address & 255)))

    # Calculate the first usable IP and last usable IP
    first_ip=$((net_address + 1))
    last_ip=$((broadcast_address - 1))

    # Convert first and last usable IPs to dotted-decimal notation
    first_ip_str=$(printf "%d.%d.%d.%d" $(( (first_ip >> 24) & 255)) $(( (first_ip >> 16) & 255)) $(( (first_ip >> 8) & 255)) $(( first_ip & 255)))
    last_ip_str=$(printf "%d.%d.%d.%d" $(( (last_ip >> 24) & 255)) $(( (last_ip >> 16) & 255)) $(( (last_ip >> 8) & 255)) $(( last_ip & 255)))

    # Extract the final octets (last part) of the first and last usable IP
    first_octet=${first_ip_str##*.}
    last_octet=${last_ip_str##*.}

    # Output the results
    echo "CIDR: $cidr"
    echo "Number of usable hosts: $num_hosts"
    echo "Usable IP range: $first_ip_str - $last_ip_str"
    echo "Network address: $network_ip"
    echo "Broadcast address: $broadcast_ip"
}

qscan () {
    # Check if the CIDR notation is provided
    if [ -z "$2" ]; then
	    echo ""
        echo "Usage: $1 <CIDR> <ports> <-v or --verbose>"
        echo "Example: $1 192.168.1.1/24"
	    echo ""
        exit 1
    fi

    cidr="$2"

    # Check if subnet mask length is /32
    if [[ "${cidr: -3}" == "/32" ]]; then
        # Extract the IP address and subnet mask length from the CIDR notation
        IFS="/" read -r ip mask <<< "$cidr"
    
        # Extract the first three octets
        first_three_octets="${ip%.*}"
    
        # Extract the last (fourth) octet
        last_octet="${ip##*.}"
    
        first_octet=$last_octet  # Update first_octet to match the last_octet for /32
        num_hosts=1
    else
        # Call another function to calculate hosts and range if it's not a /32
        calculate_hosts_and_range "$cidr"
    fi

    echo "Running scan on hosts!"

    # Assign values from arguments
    net=$first_three_octets
    start=$first_octet
    end=$last_octet
    ports=$3

    if [[ "$4" == "-v" ]] || [[ "$4" == "--verbose" ]]; then
        verb="$3"
        echo "Running in verbose mode!"
    else
        echo "Running in standard mode!"
    fi

    # Set default values if not provided
    if [ -z "$ports" ]; then
        echo "Ports missing... Adding default (21-23 80)!"
        ports="21-23 80"
    fi

    if [ $num_hosts -gt 32 ]; then
        echo "Scanning $num_hosts hosts!"
        echo "This may take a while..."
    else
        echo "Scanning $num_hosts hosts!"
    fi

    echo "IP Addr - PortNum:(Protocol)"

    # Split ports into an array
    IFS=' ' read -r -a port_array <<< "$ports"

    # Function to scan a subset of ports
    scan_ports() {
        local ip=$1
        local ports=$2
        nc -vzw1 "$ip" $ports 2>&1 | grep -E 'succ|open'  |  awk -F ' ' '{print $2 " - " $3 ":" $4 " = " $6}'
    }

    # Loop through the IP range
    for ((i=$start; i<=$end; i++)); do
        # Process ports in chunks (e.g., 5-10 ports per scan)
        for ((j=0; j<${#port_array[@]}; j+=10)); do
            chunk="${port_array[@]:$j:10}"
            
            # Run the scan for the current chunk of ports
            scan_ports "$net.$i" "$chunk" | while read result; do
                echo "$result"
                
                # Check if ftp or http is found in the result
                if echo "$result" | grep -q 'ftp'; then
                    if [[ $verb == "-v" ]] || [[ $verb == "--verbose" ]]; then
                        echo "FTP detected on $net.$i. Running wget -r..."
                    fi
                    wget -r -q "ftp://$net.$i"  # Recursively download files from the FTP server
                    
                elif echo "$result" | grep -q 'http'; then
                    if [[ $verb == "-v" ]] || [[ $verb == "--verbose" ]]; then
                        echo "HTTP detected on $net.$i. Running wget -r..."
                    fi
                    wget -r -q "http://$net.$i"  # Recursively download files from the HTTP server
                fi
            done &
        done
    done

    # Wait for all background processes to finish
    wait
}

socks () {
    if [[ -z $2 ]]; then
        echo ""
        echo "Usage: cybrecon socks <kill>"
        echo "Example: cybrecon socks k - to kill dynamic tunnel"
        echo "Example: cybrecon socks s - to detect dynamic tunnel"
	    echo ""
        exit 1
    fi
    
    socks_test=$(ss -anltp | grep 9050 | awk '{print$6}' | grep -o 'pid=[0-9]*' |  awk -F '=' '{print$2}')

    # Check if the socks_test variable is not empty
    if [[ "$2" == "k" ]]; then 
        echo "Killing dynamic tunnel!"
        kill $socks_test
        exit 1
    elif [[ "$2" == "s" ]]; then
        if [[ "$socks_test" != "" ]]; then
            echo "Dynamic tunnel exists!"
        else
            echo "Dynamic tunnel does not exist!"
        fi
    fi
}

portenum () {
    local target=''
    local ports='20-1024'
    local nmap_cmd='nmap'

    if [[ -z $2 ]]; then
        echo ""
        echo "Usage: cybrecon portenum <target> <ports> <file>"
	echo ""
        exit 1
    fi

    if [[ $4 == "file" || $4 == "f" ]]; then
        echo "Running port enumeration using target file: $2"
        target=$2
        ports=${3:-$ports}
        nmap_cmd="$nmap_cmd -iL"

    else
        echo "Running port enumeration on $2"
        target=$2
        ports=${3:-$ports}
    fi

    # Run nmap and format output
    $nmap_cmd $target -p$ports | awk '
    /Nmap scan report/ {
        if (host_printed) print "\n"; 
        print "Host:", $NF;
        host_printed=1;
        header_printed=0;
    } 
    /^[0-9]+\/tcp/ {
        if (!header_printed) { 
            print "Open Ports:";
            header_printed=1;
        }
        print $1, "-", $2, "-", $3;
    }'
}

pingsw () {
    if [[ -z $2 ]]; then
        echo "" 
        echo "Usage: cybrecon pingsw <target-subnet - CIDR notation>"
	    echo ""
        echo "Example: cybrecon pingsw 192.168.1.1/25"
        echo ""
        exit 1
    fi
    
    echo "Running ping sweep on $2"
    echo "Hosts up:"
    nmap -sn $2 | grep "report for" | awk '{print $5}'
}

bangrab () {
    if [[ -z $2 ]]; then
        echo ""
        echo "Usage: cybrecon bangrab <target> <ports> <file>"
	echo ""
        exit 1
    fi

    local default_ports='20-1024'
    local target="$2"
    local ports="${3:-$default_ports}"
    local nmap_cmd="nmap"


    if [[ $4 == "file" || $4 == "f" ]]; then
        echo "Running banner grabbing using target file: $target"
        nmap_cmd="$nmap_cmd -iL $target"
    else
        echo "Running banner grabbing on target: $target"
    fi

    # Run nmap and format output
    $nmap_cmd $target -p$ports --script banner.nse | awk '
    /Nmap scan report/ {
        if (host_printed) print "\n";  # Print newline before each new host (except first)
        print "Host:", $NF;
        print "Banners:";
        host_printed=1;
    }
    /^[0-9]+\/tcp/ {
        port = $1;  # Capture port number
    }
    /\|_banner:/ {
        split($0, banner, ": ");  # Extract banner after colon
        print port, "-", banner[2];
    }'
}

httpenum () {
    if [[ -z $2 ]]; then
        echo "" 
        echo "Usage: cybrecon httpenum <target> <ports> <file>"
	echo ""
        exit 1
    fi

    local default_ports="80,443,8080,8000,8800"
    local target="$2"
    local ports="${3:-$default_ports}"
    local nmap_cmd="nmap"

    if [[ $4 == "file" || $4 == "f" ]]; then
        echo "Running HTTP Enumeration using target file: $target"
        nmap_cmd="$nmap_cmd -iL $target"
    else
        echo "Running HTTP Enumeration on target: $target"
    fi

    # Run nmap with http-enum script
    $nmap_cmd $target -p$ports --script http-enum | awk '
    /Nmap scan report/ {
        if (host_printed) print "\n";  # Print newline before each new host (except first)
        print "Host:", $NF;
        host_printed=1;
    }
    /http-enum/ {
        print "Possible Path Traversals:";
        host_printed=1;
    }
    /\/\.\.\// {
        print $0;
    }'
}

siteenum () {
    if [[ -z $2 ]]; then
        echo "" 
        echo "Usage: cybrecon siteenum <target> <port> <file>"
	echo ""
        exit 1
    fi

    echo "Running Website Enumeration"
    local target="$2"
    local port="${3:-80}"  # Default to port 80 if none is specified
    local nmap_cmd="nmap -Pn -T5 -sT -p$port"

    if [[ $4 == "file" || $4 == "f" ]]; then
        echo "Running Website Enumeration using target file: $target"
        nmap_cmd="$nmap_cmd -iL $target"
    else
        echo "Running Website Enumeration on $target"
    fi

    # Run multiple scripts and save output
    $nmap_cmd --script http-enum.nse $target 1>./siteenum-report 2>/dev/null
    $nmap_cmd --script http-sql-injections.nse $target 1>>./siteenum-report 2>/dev/null
    $nmap_cmd --script http-robots.txt.nse $target 1>>./siteenum-report 2>/dev/null

    echo "Website enumeration complete!"
    echo "Report written to ./siteenum-report"
}

os-dis () {
    if [[ -z $2 ]]; then
        echo ""
        echo "Usage: cybrecon os-dis <target> <file>"
        echo ""
        echo "Example (Individual target): cybrecon os-dis 192.168.1.125"
	    echo ""
        echo "Example (Set of targets): cybrecon os-dis targetfile.txt f"
        echo ""
        exit 1
    fi

    local target=$2
    local nmap_cmd="nmap"

    if [[ $3 == "file" || $3 == "f" ]]; then
        echo "Running os-discovery using target file: $target"
        nmap_cmd="nmap -iL"

    else
        echo "Running os-discovery on target: $target"
    fi

    # Run nmap and format output
    $nmap_cmd $target -O
}

smb-os() {
    if [[ -z $2 ]]; then
        echo ""
        echo "Usage: cybrecon smb-os <target> <ports> <file>"
        echo ""
        echo "Example (Individual target): cybrecon smb-os 192.168.1.150 445"
        echo ""
        echo "Example (Set of targets): cybrecon smb-os targetfile.txt 445 f"
	    echo ""
        exit 1
    fi

    local default_port=445
    local target=$2
    local port=${3:-$default_port}
    local nmap_cmd="nmap"

    if [[ $4 == "file" || $4 == "f" ]]; then
        echo "Running smb-os-discovery using target file: $target"
        nmap_cmd="$nmap_cmd -iL $target"
    else
	echo "Running smb-os-discovery on target: $target"
    fi

    # Run nmap and format output
    $nmap_cmd $target -p$port --script smb-os-discovery
}

net-file () {
    if [[ -z $2 ]]; then
	echo ""
        echo "Usage: cybrecon net-file <subnet>"
	echo ""
        echo "Example: cybrecon net-file 192.168.1.1/32"
	echo ""
        exit 1
    fi

    echo "Generating network file for the $2 network"
    # Replace / with _ in subnet to make a valid filename
    local safe_subnet="${2//\//_}"
    local filename="./${safe_subnet}_network"

    touch "$filename"
    pingsw "$@" 2>/dev/null | tail -n +3 >"$filename"

    echo "$filename file created!"
}

fuzzy () {
    if [[ -z $2 ]]; then
        echo ""
        echo "Usage: cybrecon fuzzy <url> <fuzzlist>"
	echo ""
        exit 1
    fi

    local url="$2"
    local fuzzlist="./fuzzylist"

    if [[ -n $3 ]]; then
        echo "Running fuzzy on $url with custom fuzzlist: $3"
        fuzzlist="$3"
    else
        echo "No fuzzlist detected... Using default fuzzlist: $fuzzlist"
    fi

    while read -r line; do
        # Fetch the HTTP response and store it in a variable
        response=$(curl -s -I "$url$line" | grep 'HTTP/' | awk '{print $2}')
        
        # Check if the response code is 200
        if [[ "$response" == "200" ]]; then
            echo "Response: 200 | $line"
	
	elif [[ -z "$response" ]]; then
	    echo  "Err | $line"
        else
            echo "Response: $response | $line"
        fi
    done < "$fuzzlist"
}

web-shot () {
    if [[ -z $2 ]]; then
        echo ""
        echo "Usage: cybrecon web-shot <target> <file>"
        echo ""
    fi
}

if [[ -z $1 ]]; then
    banner
    echo "Cybrecon Options"

    echo "    pingsw   - Ping sweep on specific subnet"
    echo "    portenum - Port enumeration scan on target or subnet"
    echo "    bangrab - Banner grabbing scan on target or subnet"
    echo "    httpenum - Detects for HTTP server and information regarding the server"
    echo "    siteenum - Runs proxychains scanning commands on website to enumerate website info"
    echo "    smb-os - Utilizes smb-os-discovery on target or subnet"
    echo "    net-file - Uses pingsw to develop a network file to use for other scans/tools"
    echo "    socks - Detects if a SOCKS5 proxy is running on the machine and can kill it"
    echo "    qscan - Runs netcat quick scan to enumerate ports and gather any FTP or HTTP pages"
    echo "    subcalc - Calculates the subnetting information from a given CIDR notation"
    echo "    os-dis - Operating System Discovery tool that will attempt to discover the target(s) OS"
    echo "    fuzzy - Simple fuzzer that can utilize custom or default fuzzlist"
    echo "    web-shot - Fires all web-based tools in the cybrecon toolkit at a target or targets and saves it to a file"
    echo ""
fi

if [[ $1 == 'pingsw' ]]; then
    pingsw "$@"
fi

if [[ $1 == 'portenum' ]]; then
    portenum "$@"
fi

if [[ $1 == 'bangrab' ]]; then
    bangrab "$@"
fi

if [[ $1 == 'httpenum' ]]; then
    httpenum "$@"
fi

if [[ $1 == "siteenum" ]]; then
    siteenum "$@"
fi

if [[ $1 == "smb-os" ]]; then
    smb-os "$@"
fi

if [[ $1 == "qscan" ]]; then
    qscan "$@"
fi

if [[ $1 == "socks" ]]; then
    socks "$@"
fi

if [[ $1 == "net-file" ]]; then
    net-file "$@"
fi

if [[ $1 == "os-dis" ]]; then
    os-dis "$@"
fi

if [[ $1 == "fuzzy" ]]; then
   fuzzy "$@"
fi

if [[ $1 == "web-shot" ]]; then
    web-shot "$@"
fi

if [[ $1 == "subcalc" ]]; then
    # Check if the CIDR notation is provided
    if [ -z "$2" ]; then
        echo ""
        echo "Usage: $2 <CIDR>"
        echo "Example: $2 192.168.1.1/24"
        echo ""
        exit 1
    fi
	cidr="$2"
    	calculate_hosts_and_range "$cidr"
fi
