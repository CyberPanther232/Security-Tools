#!/bin/bash

: '
Program: pingsw
Purpose: Ping sweep script that calculates the IP addresses to scan via CIDR notation
Developer: Cybernsniper-dev
'

calculate_hosts_and_range() {
    # Extract the IP address and subnet mask length from the CIDR notation
    IFS="/" read -r ip mask <<< "$cidr"

    first_three_octets="${ip%.*}"

    # Convert the subnet mask length (e.g., /24) to the number of host bits
    host_bits=$((32 - mask))

    # Calculate the number of hosts (2^host_bits - 2 for network and broadcast)
    num_hosts=$((2 ** host_bits - 2))

    # Convert the IP address to its integer representation
    IFS="." read -r a b c d <<< "$ip"
    ip_decimal=$((a * 256 ** 3 + b * 256 ** 2 + c * 256 + d))

    # Calculate the network and broadcast addresses
    net_address=$((ip_decimal & ((2 ** mask - 1) << (32 - mask))))
    broadcast_address=$((net_address + (2 ** host_bits - 1)))

    # Convert network and broadcast addresses back to dotted-decimal notation
    network_ip=$(printf "%d.%d.%d.%d" $(( (net_address >> 24) & 255)) $(( (net_address >> 16) & 255)) $(( (net_address >> 8) & 255)) $(( net_address & 255)))
    broadcast_ip=$(printf "%d.%d.%d.%d" $(( (broadcast_address >> 24) & 255)) $(( (broadcast_address >> 16) & 255)) $(( (broadcast_address >> 8) & 255)) $(( broadcast_address & 255)))

    # Calculate the first usable IP and last usable IP
    first_ip=$((net_address + 1))
    last_ip=$((broadcast_address - 1))

    # Convert first and last usable IPs to dotted-decimal notation
    first_ip_str=$(printf "%d.%d.%d.%d" $(( (first_ip >> 24) & 255)) $(( (first_ip >> 16) & 255)) $(( (first_ip >> 8) & 255)) $(( first_ip & 255)))
    last_ip_str=$(printf "%d.%d.%d.%d" $(( (last_ip >> 24) & 255)) $(( (last_ip >> 16) & 255)) $(( (last_ip >> 8) & 255)) $(( last_ip & 255)))

    # Extract the final octets (last part) of the first and last usable IP
    first_octet=${first_ip_str##*.}
    last_octet=${last_ip_str##*.}

    # Output the results
    echo "CIDR: $cidr"
    echo "Number of usable hosts: $num_hosts"
    echo "Usable IP range: $first_ip_str - $last_ip_str"
    echo "Network address: $network_ip"
    echo "Broadcast address: $broadcast_ip"
}

# Check if the CIDR notation is provided
if [ -z "$1" ]; then
    echo "Usage: $0 <CIDR> <ports> <-v or --verbose>"
    echo "Example: $0 192.168.1.1/24"
    exit 1
fi

cidr="$1"

# Check if subnet mask length is /32
if [[ "${cidr: -3}" == "/32" ]]; then
    # Extract the IP address and subnet mask length from the CIDR notation
    IFS="/" read -r ip mask <<< "$cidr"
  
    # Extract the first three octets
    first_three_octets="${ip%.*}"
  
    # Extract the last (fourth) octet
    last_octet="${ip##*.}"
  
    first_octet=$last_octet  # Update first_octet to match the last_octet for /32
    num_hosts=1
else
    # Call another function to calculate hosts and range if it's not a /32
    calculate_hosts_and_range "$cidr"
fi

net=$first_three_octets
start=$first_octet
end=$last_octet

option="$2"

if [[ "$option" == "w" ]]; then
    echo "Running Windows ping sweep!"
    for ((i=$start; i<=$end; i++)); do
        ping -n 1 -w 200 $net.$i > nul && echo "$net.$i is up."
    done
elif [[ "$option" == "l" ]]; then
    echo "Running Linux ping sweep!"
    for ((i=$start; i<=$end; i++)); do
        ping -c 1 $net.$i | grep "bytes from" && echo "$net.$i is up."
    done
else
    echo "Invalid option..."
    exit 1
fi

echo "Done!"
