#!/bin/bash

: '
Program: qscan
Purpose: A quick scanning tool that takes IP addresses in CIDR notation to scan ports, identify services, and pull any useful information by conducting concurrent
netcat scans on devices within the subnet
Developer: CyberPanther232
'

# Function to calculate the number of hosts, usable IP range, and the final octets of the starting and ending hosts
calculate_hosts_and_range() {
    # Extract the IP address and subnet mask length from the CIDR notation
    IFS="/" read -r ip mask <<< "$cidr"

    first_three_octets="${ip%.*}"

    # Convert the subnet mask length (e.g., /24) to the number of host bits
    host_bits=$((32 - mask))

    # Calculate the number of hosts (2^host_bits - 2 for network and broadcast)
    num_hosts=$((2 ** host_bits - 2))

    # Convert the IP address to its integer representation
    IFS="." read -r a b c d <<< "$ip"
    ip_decimal=$((a * 256 ** 3 + b * 256 ** 2 + c * 256 + d))

    # Calculate the network and broadcast addresses
    net_address=$((ip_decimal & ((2 ** mask - 1) << (32 - mask))))
    broadcast_address=$((net_address + (2 ** host_bits - 1)))

    # Convert network and broadcast addresses back to dotted-decimal notation
    network_ip=$(printf "%d.%d.%d.%d" $(( (net_address >> 24) & 255)) $(( (net_address >> 16) & 255)) $(( (net_address >> 8) & 255)) $(( net_address & 255)))
    broadcast_ip=$(printf "%d.%d.%d.%d" $(( (broadcast_address >> 24) & 255)) $(( (broadcast_address >> 16) & 255)) $(( (broadcast_address >> 8) & 255)) $(( broadcast_address & 255)))

    # Calculate the first usable IP and last usable IP
    first_ip=$((net_address + 1))
    last_ip=$((broadcast_address - 1))

    # Convert first and last usable IPs to dotted-decimal notation
    first_ip_str=$(printf "%d.%d.%d.%d" $(( (first_ip >> 24) & 255)) $(( (first_ip >> 16) & 255)) $(( (first_ip >> 8) & 255)) $(( first_ip & 255)))
    last_ip_str=$(printf "%d.%d.%d.%d" $(( (last_ip >> 24) & 255)) $(( (last_ip >> 16) & 255)) $(( (last_ip >> 8) & 255)) $(( last_ip & 255)))

    # Extract the final octets (last part) of the first and last usable IP
    first_octet=${first_ip_str##*.}
    last_octet=${last_ip_str##*.}

    # Output the results
    echo "CIDR: $cidr"
    echo "Number of usable hosts: $num_hosts"
    echo "Usable IP range: $first_ip_str - $last_ip_str"
    echo "Network address: $network_ip"
    echo "Broadcast address: $broadcast_ip"
}

# Check if the CIDR notation is provided
if [ -z "$1" ]; then
    echo "Usage: $0 <CIDR> <ports> <-v or --verbose>"
    echo "Example: $0 192.168.1.1/24"
    exit 1
fi

cidr="$1"

# Check if subnet mask length is /32
if [[ "${cidr: -3}" == "/32" ]]; then
    # Extract the IP address and subnet mask length from the CIDR notation
    IFS="/" read -r ip mask <<< "$cidr"
  
    # Extract the first three octets
    first_three_octets="${ip%.*}"
  
    # Extract the last (fourth) octet
    last_octet="${ip##*.}"
  
    first_octet=$last_octet  # Update first_octet to match the last_octet for /32
    num_hosts=1
else
    # Call another function to calculate hosts and range if it's not a /32
    calculate_hosts_and_range "$cidr"
fi

echo "Running scan on hosts!"

# Assign values from arguments
net=$first_three_octets
start=$first_octet
end=$last_octet
ports=$2

if [[ "$3" == "-v" ]] || [[ "$3" == "--verbose" ]]; then
	verb="$3"
	echo "Running in verbose mode!"
else
	echo "Running in standard mode!"
fi

# Set default values if not provided
if [ -z "$ports" ]; then
    echo "Ports missing... Adding default (21-23 80)!"
    ports="21-23 80"
fi

if [ $num_hosts -gt 32 ]; then
    echo "Scanning $num_hosts hosts!"
    echo "This may take a while..."
else
    echo "Scanning $num_hosts hosts!"
fi

echo "IP Addr - PortNum:(Protocol)"

# Split ports into an array
IFS=' ' read -r -a port_array <<< "$ports"

# Function to scan a subset of ports
scan_ports() {
    local ip=$1
    local ports=$2
    nc -vzw1 "$ip" $ports 2>&1 | grep -E 'succ|open'  |  awk -F ' ' '{print $2 " - " $3 ":" $4 " = " $6}'
}

# Loop through the IP range
for ((i=$start; i<=$end; i++)); do
    # Process ports in chunks (e.g., 5-10 ports per scan)
    for ((j=0; j<${#port_array[@]}; j+=10)); do
        chunk="${port_array[@]:$j:10}"
        
        # Run the scan for the current chunk of ports
        scan_ports "$net.$i" "$chunk" | while read result; do
            echo "$result"
            
            # Check if ftp or http is found in the result
            if echo "$result" | grep -q 'ftp'; then
                if [[ $verb == "-v" ]] || [[ $verb == "--verbose" ]]; then
                    echo "FTP detected on $net.$i. Running wget -r..."
                fi
                wget -r -q "ftp://$net.$i"  # Recursively download files from the FTP server
                
            elif echo "$result" | grep -q 'http'; then
                if [[ $verb == "-v" ]] || [[ $verb == "--verbose" ]]; then
                    echo "HTTP detected on $net.$i. Running wget -r..."
                fi
                wget -r -q "http://$net.$i"  # Recursively download files from the HTTP server
            fi
        done &
    done
done

# Wait for all background processes to finish
wait

# Explanation of the options:
# - -v: Verbose output (on Linux, use -vv for Windows)
# - -n: Skip DNS resolution (use numeric IPs)
# - -z: Zero-I/O mode (for scanning only, no data is sent)
# - -w1: Set a timeout of 1 second for connections
# - 2>&1: Redirect stderr to stdout
# - grep -E 'succ|open': Filter the output to show only successful or open connections
# - &: Run each scan in the background
# - wait: Wait for all background processes to finish before exiting

